#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

payload=$TMPDIR/git-branch-heads-resource-request

cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
exclude_branches=$(jq -r '.source.exclude // ""' < $payload)
branch_filter=$(jq -r '.source.branches // [] | join(" ")' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)

previous_branches="$(jq -r '.version.branches // ""' < $payload)"

configure_git_global "${git_config_payload}"

e_point=!
current_heads=$(git ls-remote -h "$uri" $branch_filter | sed 's/refs\/heads\///' | awk '{print $2, $1}' | awk "\$1 $e_point~ \"^($exclude_branches)$\"" | sort -V)

current_heads_map=$(
  jq -n '
    $heads | rtrimstr("\n") | split("\n") |
      map(split(" ") | {key: .[0], value: .[1]}) |
      from_entries
  ' --arg heads "$current_heads"
)

echo "$current_heads" |
  while read branch ref; do
    if [ -z "$branch" ]; then
      continue
    fi

    prev_ref=$(jq -r '.version | .[$branch]' --arg branch "$branch" < $payload)
    if [ "$prev_ref" = "null" ]; then
      echo "$branch"
    fi
  done |
  jq -R . |
  jq -s 'map({changed: .} + $branches)' \
    --argjson branches "$current_heads_map" >&3
